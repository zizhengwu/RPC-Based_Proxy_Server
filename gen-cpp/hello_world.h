/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef hello_world_H
#define hello_world_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "hello_world_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class hello_worldIf {
 public:
  virtual ~hello_worldIf() {}
  virtual void hello(std::string& _return) = 0;
};

class hello_worldIfFactory {
 public:
  typedef hello_worldIf Handler;

  virtual ~hello_worldIfFactory() {}

  virtual hello_worldIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(hello_worldIf* /* handler */) = 0;
};

class hello_worldIfSingletonFactory : virtual public hello_worldIfFactory {
 public:
  hello_worldIfSingletonFactory(const boost::shared_ptr<hello_worldIf>& iface) : iface_(iface) {}
  virtual ~hello_worldIfSingletonFactory() {}

  virtual hello_worldIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(hello_worldIf* /* handler */) {}

 protected:
  boost::shared_ptr<hello_worldIf> iface_;
};

class hello_worldNull : virtual public hello_worldIf {
 public:
  virtual ~hello_worldNull() {}
  void hello(std::string& /* _return */) {
    return;
  }
};


class hello_world_hello_args {
 public:

  hello_world_hello_args(const hello_world_hello_args&);
  hello_world_hello_args& operator=(const hello_world_hello_args&);
  hello_world_hello_args() {
  }

  virtual ~hello_world_hello_args() throw();

  bool operator == (const hello_world_hello_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const hello_world_hello_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const hello_world_hello_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class hello_world_hello_pargs {
 public:


  virtual ~hello_world_hello_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _hello_world_hello_result__isset {
  _hello_world_hello_result__isset() : success(false) {}
  bool success :1;
} _hello_world_hello_result__isset;

class hello_world_hello_result {
 public:

  hello_world_hello_result(const hello_world_hello_result&);
  hello_world_hello_result& operator=(const hello_world_hello_result&);
  hello_world_hello_result() : success() {
  }

  virtual ~hello_world_hello_result() throw();
  std::string success;

  _hello_world_hello_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const hello_world_hello_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const hello_world_hello_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const hello_world_hello_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _hello_world_hello_presult__isset {
  _hello_world_hello_presult__isset() : success(false) {}
  bool success :1;
} _hello_world_hello_presult__isset;

class hello_world_hello_presult {
 public:


  virtual ~hello_world_hello_presult() throw();
  std::string* success;

  _hello_world_hello_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class hello_worldClient : virtual public hello_worldIf {
 public:
  hello_worldClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  hello_worldClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void hello(std::string& _return);
  void send_hello();
  void recv_hello(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class hello_worldProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<hello_worldIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (hello_worldProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_hello(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  hello_worldProcessor(boost::shared_ptr<hello_worldIf> iface) :
    iface_(iface) {
    processMap_["hello"] = &hello_worldProcessor::process_hello;
  }

  virtual ~hello_worldProcessor() {}
};

class hello_worldProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  hello_worldProcessorFactory(const ::boost::shared_ptr< hello_worldIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< hello_worldIfFactory > handlerFactory_;
};

class hello_worldMultiface : virtual public hello_worldIf {
 public:
  hello_worldMultiface(std::vector<boost::shared_ptr<hello_worldIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~hello_worldMultiface() {}
 protected:
  std::vector<boost::shared_ptr<hello_worldIf> > ifaces_;
  hello_worldMultiface() {}
  void add(boost::shared_ptr<hello_worldIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void hello(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hello(_return);
    }
    ifaces_[i]->hello(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class hello_worldConcurrentClient : virtual public hello_worldIf {
 public:
  hello_worldConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  hello_worldConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void hello(std::string& _return);
  int32_t send_hello();
  void recv_hello(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
